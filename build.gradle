buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	alias(libs.plugins.spotless)
    alias(libs.plugins.version.catalog.update)
}

/* Build collections containing each type of project.  These collections will
 * be used to apply common configurations to projects of the same type.
 */
def packageProjects = allprojects.findAll { project -> project.path.equals(':osmosis') }
def buildProjects = allprojects.findAll { project -> project.path.equals(':build-support') }
def dockerProjects = allprojects.findAll { project -> project.path.equals(':db-server') }
// Java projects are all those that aren't in the previous collections.
def javaProjects = allprojects.findAll { project -> !packageProjects.contains(project) && !buildProjects.contains(project) && !dockerProjects.contains(project) }
// External Java projects are those that are built as part of Osmosis but originate externally.
def externalJavaProjects = allprojects.findAll { project -> project.path.equals(':osmosis-hstore-jdbc') }
def internalJavaProjects = javaProjects.findAll { project -> !externalJavaProjects.contains(project) }

// Apply common project configuration
allprojects {
	// All projects use a common group id.
	group = 'org.openstreetmap.osmosis'

	// Load the project version dynamically from Git.  For release builds, don't add a suffix.
	def versionSuffix = "RELEASE".equals(osmosisBuildType) ? '' : '-' + osmosisBuildType
	version = 'git describe --always --dirty'.execute().in.text.trim() + versionSuffix

	// Enable access to artefact dependency repositories.
	repositories {
		// Standard Maven repository.
		mavenCentral()
	}
}

// Apply common configurations to all projects supporting Java.
configure(javaProjects) {
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'
	if (!externalJavaProjects.contains(project)) {
		apply plugin: rootProject.libs.plugins.spotless.get().pluginId
	}

	sourceCompatibility = 17

	java {
		withJavadocJar()
		withSourcesJar()
	}

	javadoc {
		if(JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}

	test {
		useJUnitPlatform()

		/*
		 * Pass on each of our custom properties to the unit tests if they have
		 * been provided.
		 */
		['db.apidb.authfile', 'db.pgsql.authfile'].each {
			propName ->
				if (System.getProperties().containsKey(propName)) {
					jvmArgs '-D' + propName + '=' + System.getProperty(propName)
				}
		}
		//testLogging.showStandardStreams = true
	}

	dependencies {
		testImplementation platform(libs.junit.bom)
		testImplementation libs.junit.jupiter
		testRuntimeOnly libs.junit.platform.launcher
	}

	// Configure the maven-publish plugin to upload artifacts to the Sonatype repository.
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				pom {
					name = project.name
					packaging = 'jar'
					description = 'Osmosis is a Java application and library for processing OSM data.'
					url = 'http://wiki.openstreetmap.org/wiki/Osmosis'

					scm {
						connection = 'scm:git:git://github.com/openstreetmap/osmosis.git'
						developerConnection = 'scm:git:ssh://git@github.com/openstreetmap/osmosis.git'
						url = 'https://github.com/openstreetmap/osmosis'
					}

					licenses {
						license {
							name = 'Public Domain'
						}
					}

					developers {
						developer {
							id = 'brett'
							name = 'Brett Henderson'
							email = 'brett@bretth.com'
						}
					}
				}
			}
		}
		repositories {
			maven {
				def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
				def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
				url = "RELEASE".equals(osmosisBuildType) ? releasesRepoUrl : snapshotsRepoUrl
				credentials {
					username sonatypeUsername
					password sonatypePassword
				}
			}
		}
	}

	// Sign all published artifacts if signing is enabled.
	signing {
		sign publishing.publications.mavenJava
	}
}

// Apply additional common configurations to all internal Java projects.
configure(internalJavaProjects) {
    spotless {
        java {
            palantirJavaFormat()
            licenseHeader '// This software is released into the Public Domain.  See copying.txt for details.'
        }
    }
}
